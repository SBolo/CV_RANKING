#include "Ito_integrator.h"
#include <fstream>
#include <iostream>
#include <gsl/gsl_rng.h>
#include <stdio.h>
#include <unistd.h>
#include <string>
#include <vector>
#include <math.h>

#define MAX 1.e50

using namespace std;

int main( int argc, char *argv[] ) {
    ifstream in;
    ofstream out, info;
    char filename[50];
    double z, zmin, s, smin, w, wmin, fm, bfm, temp;
    double x, y;
    int n_folders = 0;
    vector<int> folders;

    /** SIMULATION PARAMETERS */
    /** these parameters are common for all the types of simulations */

    int n_in_cond           = 1;
    int dim                 = 2; //number of system's dimensions
    int total_time          = 500000; //total number of timesteps to simulate
    int stride              = 50; //frames will be saved once every 'stride'
    int len                 = (int)(total_time/stride);
    double timestep         = 0.02; //integration timestep

    /** PHYSICAL PARAMETERS */
    double friction = 1.; //friction constant
    double kbT      = 0.5; //energy in k Boltzmann times the temperature

    /** VECTORS INITIALIZATION */
    vector<double> *x0  = new vector<double>(dim); //vector for initial condition
    /** INITIAL POSITIONS */
    (*x0)[0] = atof(argv[1]);
    (*x0)[1] = atof(argv[2]);

    // cout << sim_num << " " << (*x0)[0] << " " << (*x0)[1] << endl;

    /** RNG INITIALIZATION */
    RandomNumbers *rng = new RandomNumbers();

    //allocate the class for the integrator
    Ito_integrator *ito = new Ito_integrator(rng, dim, timestep, friction, kbT, x0);

     //<-------- FOR INFOS
    sprintf(filename, "traj.txt");
    info.open(filename, ios::out);
    info << "#x\t y" << endl;
    info << (*x0)[0] << "\t" << (*x0)[1] << endl;

    //info << "# s    -   s_min   -   w   -   w_min   -    |f|^2    -   |f_bias|^2" << endl;


    //loop over timesteps
    for( int j = 0; j < total_time; j++ ) {

        ito->evolve();

        //once every stride, collect information and print it on file
        if( j%stride == 0 ) {
          x = ito->get_position(0);
          y = ito->get_position(1);
          info << x << "\t" << y << endl;

            // s = ito->get_s();
            // smin = ito->get_s_min();
            // w = ito->get_w();
            // wmin = ito->get_w_min();
            // fm = ito->get_force();
            // bfm = ito->get_bforce();
            // info << s << "\t" << smin << "\t" << w << "\t" << wmin << "\t" << fm << "\t" << bfm << endl;

        }
    }

    /** LOOP OVER TIMES ENDS HERE **/
     info.close(); //<-------- FOR INFOS

    delete ito;

}

    /** SIMULATION STARTS HERE */

//     if(method=="SCPS"||method =="SC_iterations") {
//
//         //std::cout << "----> OK, NOW LET'S GO SELF CONSISTENT <-----" << endl;
//         double a;
//
//         mpaths.clear();
//         for (int ic=0; ic<n_in_cond; ic++){
//             mpaths.push_back(new vector<vector<double> >(dim, vector<double>(cut_length)));
//         }
//
//         //LOADING rMD MEAN PATH GENERATED BY PYTHON
//         for(int init =0; init < n_in_cond; init ++) {
//             sprintf( filename, "trajs/mean_traj.txt");
//             in.open( filename, ios::in );
//
//             for( int t = 0; t < cut_length; t++ ) {
//                 for( int d = 0; d < dim; d++ ) {
//                     in >> (*mpaths[init])[d][t];
//
//                 }
//             }
//             in.close();
//         }
//
//
//
//         winner_traj = tot_traj + 1;
//
//         //REPEATING THE SELF CONSISTENT STEP 'N_SELFC_ITERATIONS' TIMES
//         for(int it=0; it <n_selfc_iterations; it++ ) {
//
//             for( int icon = 0; icon < n_in_cond; icon++ ) {
//
//                 n_folders = 0;
//                 folders.clear();
//
//                 min_penalty = MAX;
//                 pen.clear();
//
//                 for( int traj = 0; traj < tot_traj; traj++ ) {
//
//                     //allocate the class for the integrator
//                     Ito_integrator *ito = new Ito_integrator( rng, dim, subs, timestep, friction, kbT, ks, kw, lambda, x0, t, mpaths[icon]);
//
//                      //<-------- FOR INFOS
//                     sprintf(filename, "trajs/info_%d.txt", sim_num);
//                     info.open(filename, ios::out);
//                     info << "# s    -   s_min   -   w   -   w_min   -    |f|^2    -   |f_bias|^2" << endl;
//
//
//                     //loop over timesteps
//                     for( int j = 0; j < total_time; j++ ) {
//
//                         ito->evolve();
//
//                         //once every stride, collect information and print it on file
//                         if( j%stride == 0 ) {
//
//                             s = ito->get_s();
//                             smin = ito->get_s_min();
//                             w = ito->get_w();
//                             wmin = ito->get_w_min();
//                             fm = ito->get_force();
//                             bfm = ito->get_bforce();
//                             info << s << "\t" << smin << "\t" << w << "\t" << wmin << "\t" << fm << "\t" << bfm << endl;
//
//                         }
//                     }
//
//                     /** LOOP OVER TIMES ENDS HERE **/
//                      info.close(); //<-------- FOR INFOS
//
//                     delete ito;
//
//                 }
//
//             }
//
//         }
//
//     }
//     /** 2Â° RUN OF SIMULATION ENDS HERE */
//
//
//     return 0;
// }
